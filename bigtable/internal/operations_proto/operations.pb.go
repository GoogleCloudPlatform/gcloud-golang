// Code generated by protoc-gen-go.
// source: google.golang.org/cloud/bigtable/internal/operations_proto/operations.proto
// DO NOT EDIT!

/*
Package google_longrunning is a generated protocol buffer package.

It is generated from these files:
	google.golang.org/cloud/bigtable/internal/operations_proto/operations.proto

It has these top-level messages:
	Operation
	GetOperationRequest
	ListOperationsRequest
	ListOperationsResponse
	CancelOperationRequest
	DeleteOperationRequest
*/
package google_longrunning

import proto "github.com/golang/protobuf/proto"

// discarding unused import google_api1 "google.golang.org/cloud/bigtable/internal/google_api"
import google_protobuf1 "google.golang.org/cloud/bigtable/internal/google_protobuf"
import google_protobuf2 "google.golang.org/cloud/bigtable/internal/google_protobuf"
import google_rpc "google.golang.org/cloud/bigtable/internal/status_proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

// This resource represents a long-running operation that is the result of a
// network API call.
type Operation struct {
	// The name of the operation resource, which is only unique within the same
	// service that originally returns it.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Some service-specific metadata associated with the operation.  It typically
	// contains progress information and common metadata such as create time.
	// Some services may not provide such metadata.  Any method that returns a
	// long-running operation should document the metadata type, if any.
	Metadata *google_protobuf1.Any `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
	// If the value is false, it means the operation is still in progress.
	// If true, the operation is completed and the `result` is available.
	Done bool `protobuf:"varint,3,opt,name=done" json:"done,omitempty"`
	// The error result of the operation in case of failure.
	Error *google_rpc.Status `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	// The normal response of the operation in case of success.  If the original
	// method returns no data on success, such as `Delete`, the response will be
	// `google.protobuf.Empty`.  If the original method is standard
	// `Get`/`Create`/`Update`, the response should be the resource.  For other
	// methods, the response should have the type `XxxResponse`, where `Xxx`
	// is the original method name.  For example, if the original method name
	// is `TakeSnapshot()`, the inferred response type will be
	// `TakeSnapshotResponse`.
	Response *google_protobuf1.Any `protobuf:"bytes,5,opt,name=response" json:"response,omitempty"`
}

func (m *Operation) Reset()         { *m = Operation{} }
func (m *Operation) String() string { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()    {}

func (m *Operation) GetMetadata() *google_protobuf1.Any {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Operation) GetError() *google_rpc.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Operation) GetResponse() *google_protobuf1.Any {
	if m != nil {
		return m.Response
	}
	return nil
}

// The request message for [Operations.GetOperation][google.longrunning.Operations.GetOperation].
type GetOperationRequest struct {
	// The name of the operation resource.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetOperationRequest) Reset()         { *m = GetOperationRequest{} }
func (m *GetOperationRequest) String() string { return proto.CompactTextString(m) }
func (*GetOperationRequest) ProtoMessage()    {}

// The request message for [Operations.ListOperations][google.longrunning.Operations.ListOperations].
type ListOperationsRequest struct {
	// The name of the operation collection.
	Name string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// The standard List filter.
	Filter string `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	// The standard List page size.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size" json:"page_size,omitempty"`
	// The standard List page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token" json:"page_token,omitempty"`
}

func (m *ListOperationsRequest) Reset()         { *m = ListOperationsRequest{} }
func (m *ListOperationsRequest) String() string { return proto.CompactTextString(m) }
func (*ListOperationsRequest) ProtoMessage()    {}

// The response message for [Operations.ListOperations][google.longrunning.Operations.ListOperations].
type ListOperationsResponse struct {
	// A list of operations that match the specified filter in the request.
	Operations []*Operation `protobuf:"bytes,1,rep,name=operations" json:"operations,omitempty"`
	// The standard List next-page token.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token" json:"next_page_token,omitempty"`
}

func (m *ListOperationsResponse) Reset()         { *m = ListOperationsResponse{} }
func (m *ListOperationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListOperationsResponse) ProtoMessage()    {}

func (m *ListOperationsResponse) GetOperations() []*Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

// The request message for [Operations.CancelOperation][google.longrunning.Operations.CancelOperation].
type CancelOperationRequest struct {
	// The name of the operation resource to be cancelled.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *CancelOperationRequest) Reset()         { *m = CancelOperationRequest{} }
func (m *CancelOperationRequest) String() string { return proto.CompactTextString(m) }
func (*CancelOperationRequest) ProtoMessage()    {}

// The request message for [Operations.DeleteOperation][google.longrunning.Operations.DeleteOperation].
type DeleteOperationRequest struct {
	// The name of the operation resource to be deleted.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DeleteOperationRequest) Reset()         { *m = DeleteOperationRequest{} }
func (m *DeleteOperationRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteOperationRequest) ProtoMessage()    {}

// Client API for Operations service

type OperationsClient interface {
	// Gets the latest state of a long-running operation.  Clients may use this
	// method to poll the operation result at intervals as recommended by the API
	// service.
	GetOperation(ctx context.Context, in *GetOperationRequest, opts ...grpc.CallOption) (*Operation, error)
	// Lists operations that match the specified filter in the request. If the
	// server doesn't support this method, it returns
	// `google.rpc.Code.UNIMPLEMENTED`.
	ListOperations(ctx context.Context, in *ListOperationsRequest, opts ...grpc.CallOption) (*ListOperationsResponse, error)
	// Starts asynchronous cancellation on a long-running operation.  The server
	// makes a best effort to cancel the operation, but success is not
	// guaranteed.  If the server doesn't support this method, it returns
	// `google.rpc.Code.UNIMPLEMENTED`.  Clients may use
	// [Operations.GetOperation] or other methods to check whether the
	// cancellation succeeded or the operation completed despite cancellation.
	CancelOperation(ctx context.Context, in *CancelOperationRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// Deletes a long-running operation.  It indicates the client is no longer
	// interested in the operation result. It does not cancel the operation.
	DeleteOperation(ctx context.Context, in *DeleteOperationRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
}

type operationsClient struct {
	cc *grpc.ClientConn
}

func NewOperationsClient(cc *grpc.ClientConn) OperationsClient {
	return &operationsClient{cc}
}

func (c *operationsClient) GetOperation(ctx context.Context, in *GetOperationRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := grpc.Invoke(ctx, "/google.longrunning.Operations/GetOperation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationsClient) ListOperations(ctx context.Context, in *ListOperationsRequest, opts ...grpc.CallOption) (*ListOperationsResponse, error) {
	out := new(ListOperationsResponse)
	err := grpc.Invoke(ctx, "/google.longrunning.Operations/ListOperations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationsClient) CancelOperation(ctx context.Context, in *CancelOperationRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/google.longrunning.Operations/CancelOperation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationsClient) DeleteOperation(ctx context.Context, in *DeleteOperationRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/google.longrunning.Operations/DeleteOperation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Operations service

type OperationsServer interface {
	// Gets the latest state of a long-running operation.  Clients may use this
	// method to poll the operation result at intervals as recommended by the API
	// service.
	GetOperation(context.Context, *GetOperationRequest) (*Operation, error)
	// Lists operations that match the specified filter in the request. If the
	// server doesn't support this method, it returns
	// `google.rpc.Code.UNIMPLEMENTED`.
	ListOperations(context.Context, *ListOperationsRequest) (*ListOperationsResponse, error)
	// Starts asynchronous cancellation on a long-running operation.  The server
	// makes a best effort to cancel the operation, but success is not
	// guaranteed.  If the server doesn't support this method, it returns
	// `google.rpc.Code.UNIMPLEMENTED`.  Clients may use
	// [Operations.GetOperation] or other methods to check whether the
	// cancellation succeeded or the operation completed despite cancellation.
	CancelOperation(context.Context, *CancelOperationRequest) (*google_protobuf2.Empty, error)
	// Deletes a long-running operation.  It indicates the client is no longer
	// interested in the operation result. It does not cancel the operation.
	DeleteOperation(context.Context, *DeleteOperationRequest) (*google_protobuf2.Empty, error)
}

func RegisterOperationsServer(s *grpc.Server, srv OperationsServer) {
	s.RegisterService(&_Operations_serviceDesc, srv)
}

func _Operations_GetOperation_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(GetOperationRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(OperationsServer).GetOperation(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Operations_ListOperations_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(ListOperationsRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(OperationsServer).ListOperations(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Operations_CancelOperation_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(CancelOperationRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(OperationsServer).CancelOperation(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Operations_DeleteOperation_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DeleteOperationRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(OperationsServer).DeleteOperation(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Operations_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.longrunning.Operations",
	HandlerType: (*OperationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOperation",
			Handler:    _Operations_GetOperation_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _Operations_ListOperations_Handler,
		},
		{
			MethodName: "CancelOperation",
			Handler:    _Operations_CancelOperation_Handler,
		},
		{
			MethodName: "DeleteOperation",
			Handler:    _Operations_DeleteOperation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
