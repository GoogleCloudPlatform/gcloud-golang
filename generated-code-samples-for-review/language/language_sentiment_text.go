// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"log"

	language "cloud.google.com/go/language/apiv1"
	languagepb "google.golang.org/genproto/googleapis/cloud/language/v1"
)

// [START language_sentiment_text]

// sampleAnalyzeSentiment: Analyzing Sentiment in a String
//
// textContent: The text content to analyze
func sampleAnalyzeSentiment(textContent string) error {
	ctx := context.Background()
	c, err := language.NewClient(ctx)
	if err != nil {
		return err
	}

	// textContent := "I am so happy and joyful."
	req := &languagepb.AnalyzeSentimentRequest{
		Document: &languagepb.Document{
			Source: &languagepb.Document_Content{
				Content: textContent,
			},
			// Available types: PLAIN_TEXT, HTML
			Type: languagepb.Document_PLAIN_TEXT,
			// Optional. If not specified, the language is automatically detected.
			// For list of supported languages:
			//   https://cloud.google.com/natural-language/docs/languages
			Language: "en",
		},
		// Available values: NONE, UTF8, UTF16, UTF32
		EncodingType: languagepb.EncodingType_UTF8,
	}
	resp, err := c.AnalyzeSentiment(ctx, req)
	if err != nil {
		return err
	}

	// Get overall sentiment of the input document
	fmt.Printf("Document sentiment score: %v\n", resp.GetDocumentSentiment().GetScore())
	fmt.Printf("Document sentiment magnitude: %v\n", resp.GetDocumentSentiment().GetMagnitude())
	// Get sentiment for all sentences in the document
	for _, sentence := range resp.GetSentences() {
		fmt.Printf("Sentence text: %v\n", sentence.GetText().GetContent())
		fmt.Printf("Sentence sentiment score: %v\n", sentence.GetSentiment().GetScore())
		fmt.Printf("Sentence sentiment magnitude: %v\n", sentence.GetSentiment().GetMagnitude())
	}
	// Get the language of the text, which will be the same as
	// the language specified in the request or, if not specified,
	// the automatically-detected language.
	//
	fmt.Printf("Language of the text: %v\n", resp.GetLanguage())
	return nil
}

// [END language_sentiment_text]

func main() {
	textContent := flag.String("text_content", "I am so happy and joyful.", "")
	flag.Parse()
	if err := sampleAnalyzeSentiment(*textContent); err != nil {
		log.Fatal(err)
	}
}
